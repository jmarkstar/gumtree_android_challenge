plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'org.jlleitschuh.gradle.ktlint'
}

apply from: '../jacoco.gradle'

// Properties from private.properties
def privatePropertiesFile = rootProject.file("private.properties")
def privateProperties = new Properties()
if (privatePropertiesFile.exists()) {
    privateProperties.load(new FileInputStream(privatePropertiesFile))
    if (!privateProperties.containsKey('api.key.development') ||
            !privateProperties.containsKey('api.key.production')) {
        throw new IllegalArgumentException("api key properties were not found in private.properties")
    }
} else {
    throw new IllegalArgumentException("private.properties was not found in the project")
}

def PRIVATE_CONFIG = { k -> "\"${privateProperties.get(k)}\"" }

// Properties from keystore.properties
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Properties from gradle.properties
def CONFIG = { k -> "\"${project.properties.get(k)}\"" }

def API_HOST = "API_HOST"
def API_SCHEMA = "API_SCHEMA"
def API_KEY = "API_KEY"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "com.jmarkstar.gumtree_challenge"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {

            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental" : "true",
                        "room.expandProjection" : "true"
                ]
            }
        }

        buildConfigField("boolean", "enableEncryption", "true")
    }

    buildFeatures {
        dataBinding true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            // v1 signature scheme makes our app vulnerable to Janus vulnerability on Android <7.0
            v1SigningEnabled false
            v2SigningEnabled true
        }
    }

    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            debuggable true
            testCoverageEnabled true
            minifyEnabled false

            buildConfigField "String", API_SCHEMA, CONFIG("api.schema.development")
            buildConfigField "String", API_HOST, CONFIG("api.host.development")
            buildConfigField "String", API_KEY, PRIVATE_CONFIG("api.key.development")
        }

        release {
            minifyEnabled true
            debuggable true
            testCoverageEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", API_SCHEMA, CONFIG("api.schema.production")
            buildConfigField "String", API_HOST, CONFIG("api.host.production")
            buildConfigField "String", API_KEY, PRIVATE_CONFIG("api.key.production")
        }
    }

    applicationVariants.all { variant ->

        variant.outputs.all { output ->

            def builtType = variant.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            outputFileName = "app-${builtType}-${versionName}-${versionCode}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
        xmlReport false
        xmlOutput file("${buildDir}/reports/lint/lint-report.xml")
        htmlReport true
        htmlOutput file("${buildDir}/reports/lint/lint-report.html")
    }
}

kapt {
    correctErrorTypes true
}

ktlint {
    android = true
    debug = true
    outputColorName = "RED"
    reporters {
        customReporters {
            "html" {
                fileExtension = "html"
                dependency = "com.pinterest.ktlint:ktlint-reporter-html:$ktlint_version"
            }
        }
    }
}

// Hilt unit test only runs by gradle commands.
hilt {
    enableTransformForLocalTests = true
}

dependencies {

    // noinspection DifferentStdlibGradleVersion
    implementation ("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"){
        exclude group:"org.jetbrains.kotlin", module: "kotlin-stdlib-jdk7"
    }

    // noinspection GradleDependency
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "androidx.fragment:fragment-ktx:$androidx_fragment_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_component_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_component_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayout_version"

    // viewmodel + lifedata
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$livecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$livecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$livecycle_version"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$ok_http_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$ok_http_version"

    // Database
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "net.zetetic:android-database-sqlcipher:$android_sqlcipher"
    implementation "androidx.sqlite:sqlite-ktx:$sqlite_ktx_version"

    implementation "androidx.security:security-crypto:$security_crypto_version"

    // DI - Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_viewmodel_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_viewmodel_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // App Logging and crashes
    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'

    debugImplementation "androidx.fragment:fragment-testing:$androidx_fragment_version"
    debugImplementation "androidx.test:core:$testcore_version"

    // Test
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.google.truth:truth:$google_truth"
    testImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
    testImplementation "androidx.test.ext:junit:$android_junit_ext_version"
    testImplementation "androidx.test:runner:$testRunner_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver_version"
    testImplementation "androidx.navigation:navigation-testing:$nav_component_version"
    testImplementation "com.jakewharton.espresso:okhttp3-idling-resource:1.0.0"

    // Android Test
    androidTestImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test:rules:$testRunner_version"
    androidTestImplementation "androidx.test.ext:junit:$android_junit_ext_version"
    androidTestImplementation "androidx.test:runner:$testRunner_version"
}